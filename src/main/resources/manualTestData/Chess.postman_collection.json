{
	"info": {
		"_postman_id": "78c50db2-f0b5-4aa1-87f4-44056a884384",
		"name": "Chess",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Register User1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Username message present\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.username).to.eql(\"test_user1\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"tokenEndpoint\", \"dontGetToken\")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"test_user1\",\r\n    \"password\": \"admin\",\r\n    \"confirmPassword\": \"admin\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/registration",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"registration"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register User2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Username message present\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.username).to.eql(\"test_user2\");\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set(\"tokenEndpoint\", \"getToken\")"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"test_user2\",\r\n    \"password\": \"admin\",\r\n    \"confirmPassword\": \"admin\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/registration",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"registration"
					]
				}
			},
			"response": []
		},
		{
			"name": "Token Player 1",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set(\"PlayerOneAccessToken\", pm.response.json().access_token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "test_user1",
							"type": "string"
						},
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Bearer",
						"value": "eyJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJzZWxmIiwic3ViIjoiZHZlZ2EiLCJleHAiOjE2NzE2MjIyOTQsImlhdCI6MTY3MTYxODY5NCwic2NvcGUiOiJyZWFkIn0.mOQh-BZHDHB-7glvBt4i3Gdo22EU5Gh7Y4cUXgwX6jCfKBoTQ5FtDgT_33Qd_2MwhkbE4FG_kPZK4DFCVu9ek4x4woS4T3uY3yy1qkp3TWzg8TWXjvO93i4hS4yndv8_0a1PpHy3G3eVGh5JzseLaaMJX1lk2ZDiMEzbnDillX4FpYFycq2AHPHPl4_BOT6z8vrrptbAhMy-VSRWG43XS1huzD1VfYwlYL6d8-AYjlwhmm9OgNwVGOge6QT2CERODxHNFRdU5xPBu7kNMy-frsBedBx_YwTEzpwxIOwUbtuQr22OmOpBROgWZ6u16ZD_kG4aFg85eSwkfe50hICDfQ",
						"type": "default",
						"disabled": true
					}
				],
				"url": {
					"raw": "http://localhost:8080/token",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "Token Player 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.collectionVariables.set(\"PlayerTwoAccessToken\", pm.response.json().access_token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "test_user2",
							"type": "string"
						},
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Bearer",
						"value": "eyJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJzZWxmIiwic3ViIjoiZHZlZ2EiLCJleHAiOjE2NzE2MjIyOTQsImlhdCI6MTY3MTYxODY5NCwic2NvcGUiOiJyZWFkIn0.mOQh-BZHDHB-7glvBt4i3Gdo22EU5Gh7Y4cUXgwX6jCfKBoTQ5FtDgT_33Qd_2MwhkbE4FG_kPZK4DFCVu9ek4x4woS4T3uY3yy1qkp3TWzg8TWXjvO93i4hS4yndv8_0a1PpHy3G3eVGh5JzseLaaMJX1lk2ZDiMEzbnDillX4FpYFycq2AHPHPl4_BOT6z8vrrptbAhMy-VSRWG43XS1huzD1VfYwlYL6d8-AYjlwhmm9OgNwVGOge6QT2CERODxHNFRdU5xPBu7kNMy-frsBedBx_YwTEzpwxIOwUbtuQr22OmOpBROgWZ6u16ZD_kG4aFg85eSwkfe50hICDfQ",
						"type": "default",
						"disabled": true
					}
				],
				"url": {
					"raw": "http://localhost:8080/token",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "CreateNewBoardWithPlayerOne",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set(\"chessBoardId\", pm.response.json().BoardId);\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{PlayerOneAccessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "localhost:8080/board",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"board"
					]
				}
			},
			"response": []
		},
		{
			"name": "Player2JoinsGame",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"const chessBoardId = pm.collectionVariables.get(\"chessBoardId\");\r",
							"\r",
							"pm.test(\"Chess board Id is matching path variable\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.BoardId).to.eql(chessBoardId);\r",
							"});\r",
							"\r",
							"pm.test(\"Player two should not be null\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.Players.PlayerTwoUsername).to.eql(\"test_user2\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{PlayerTwoAccessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/add-player-two-board/{{chessBoardId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"add-player-two-board",
						"{{chessBoardId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PlayerOneMakesMoveCastling",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"const chessBoardId = pm.collectionVariables.get(\"chessBoardId\");\r",
							"\r",
							"pm.test(\"Source square should be emptypiece\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.Squares[6][5].piece.type).to.eql(\"emptypiece\");\r",
							"});\r",
							"\r",
							"pm.test(\"Destination square should be pawn\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.Squares[4][5].piece.type).to.eql(\"pawn\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{PlayerOneAccessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"currentRow\": 6,\r\n    \"currentColumn\": 5,\r\n    \"newRow\": 4,\r\n    \"newColumn\": 5\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/make-a-move/{{chessBoardId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"make-a-move",
						"{{chessBoardId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PlayerTwoMakesMoveCastling",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Source square should be emptypiece\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.Squares[0][1].piece.type).to.eql(\"emptypiece\");\r",
							"});\r",
							"\r",
							"pm.test(\"Destination square should be pawn\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.Squares[2][2].piece.type).to.eql(\"knight\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{PlayerTwoAccessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"currentRow\": 0,\r\n    \"currentColumn\": 1,\r\n    \"newRow\": 2,\r\n    \"newColumn\": 2\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/make-a-move/{{chessBoardId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"make-a-move",
						"{{chessBoardId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PlayerOneMakesMoveCastling2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"const chessBoardId = pm.collectionVariables.get(\"chessBoardId\");\r",
							"\r",
							"pm.test(\"Source square should be emptypiece\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.Squares[4][5].piece.type).to.eql(\"emptypiece\");\r",
							"});\r",
							"\r",
							"pm.test(\"Destination square should be pawn\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.Squares[3][5].piece.type).to.eql(\"pawn\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{PlayerOneAccessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"currentRow\": 4,\r\n    \"currentColumn\": 5,\r\n    \"newRow\": 3,\r\n    \"newColumn\": 5\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/make-a-move/{{chessBoardId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"make-a-move",
						"{{chessBoardId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PlayerTwoMakesMoveCastling2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Source square should be emptypiece\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.Squares[2][2].piece.type).to.eql(\"emptypiece\");\r",
							"});\r",
							"\r",
							"pm.test(\"Destination square should be pawn\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.Squares[0][1].piece.type).to.eql(\"knight\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{PlayerTwoAccessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"currentRow\": 2,\r\n    \"currentColumn\": 2,\r\n    \"newRow\": 0,\r\n    \"newColumn\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/make-a-move/{{chessBoardId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"make-a-move",
						"{{chessBoardId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PlayerOneMakesMoveCastling3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"const chessBoardId = pm.collectionVariables.get(\"chessBoardId\");\r",
							"\r",
							"pm.test(\"Source square should be emptypiece\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.Squares[3][5].piece.type).to.eql(\"emptypiece\");\r",
							"});\r",
							"\r",
							"pm.test(\"Destination square should be pawn\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.Squares[2][5].piece.type).to.eql(\"pawn\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{PlayerOneAccessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"currentRow\": 3,\r\n    \"currentColumn\": 5,\r\n    \"newRow\": 2,\r\n    \"newColumn\": 5\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/make-a-move/{{chessBoardId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"make-a-move",
						"{{chessBoardId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PlayerTwoMakesMoveCastling3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Source square should be emptypiece\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.Squares[0][1].piece.type).to.eql(\"emptypiece\");\r",
							"});\r",
							"\r",
							"pm.test(\"Destination square should be pawn\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.Squares[2][2].piece.type).to.eql(\"knight\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{PlayerTwoAccessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"currentRow\": 0,\r\n    \"currentColumn\": 1,\r\n    \"newRow\": 2,\r\n    \"newColumn\": 2\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/make-a-move/{{chessBoardId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"make-a-move",
						"{{chessBoardId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PlayerOneMakesMoveCastling4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"const chessBoardId = pm.collectionVariables.get(\"chessBoardId\");\r",
							"\r",
							"pm.test(\"Source square should be emptypiece\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.Squares[2][5].piece.type).to.eql(\"emptypiece\");\r",
							"});\r",
							"\r",
							"pm.test(\"Destination square should be pawn\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.Squares[1][6].piece.type).to.eql(\"pawn\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{PlayerOneAccessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"currentRow\": 2,\r\n    \"currentColumn\": 5,\r\n    \"newRow\": 1,\r\n    \"newColumn\": 6\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/make-a-move/{{chessBoardId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"make-a-move",
						"{{chessBoardId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PlayerTwoMakesMoveCastling4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Source square should be emptypiece\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.Squares[2][2].piece.type).to.eql(\"emptypiece\");\r",
							"});\r",
							"\r",
							"pm.test(\"Destination square should be pawn\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.Squares[0][1].piece.type).to.eql(\"knight\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{PlayerTwoAccessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"currentRow\": 2,\r\n    \"currentColumn\": 2,\r\n    \"newRow\": 0,\r\n    \"newColumn\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/make-a-move/{{chessBoardId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"make-a-move",
						"{{chessBoardId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PlayerOneMakesMoveCastling5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"const chessBoardId = pm.collectionVariables.get(\"chessBoardId\");\r",
							"\r",
							"pm.test(\"Source square should be emptypiece\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.Squares[1][6].piece.type).to.eql(\"emptypiece\");\r",
							"});\r",
							"\r",
							"pm.test(\"Destination square should be pawn\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.Squares[0][7].piece.type).to.eql(\"pawn\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{PlayerOneAccessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"currentRow\": 1,\r\n    \"currentColumn\": 6,\r\n    \"newRow\": 0,\r\n    \"newColumn\": 7\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/make-a-move/{{chessBoardId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"make-a-move",
						"{{chessBoardId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PlayerOnePromotePawn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"const chessBoardId = pm.collectionVariables.get(\"chessBoardId\");\r",
							"\r",
							"pm.test(\"Promoted pawn should be queen\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.Squares[0][7].piece.type).to.eql(\"queen\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{PlayerOneAccessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"upgradedPieceName\": \"Queen\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/promote-pawn/{{chessBoardId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"promote-pawn",
						"{{chessBoardId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PlayerTwoMakesMoveCastling5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Source square should be emptypiece\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.Squares[1][7].piece.type).to.eql(\"emptypiece\");\r",
							"});\r",
							"\r",
							"pm.test(\"Destination square should be pawn\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.Squares[2][7].piece.type).to.eql(\"pawn\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{PlayerTwoAccessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"currentRow\": 1,\r\n    \"currentColumn\": 7,\r\n    \"newRow\": 2,\r\n    \"newColumn\": 7\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/make-a-move/{{chessBoardId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"make-a-move",
						"{{chessBoardId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PlayerOneMakesMove",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"const chessBoardId = pm.collectionVariables.get(\"chessBoardId\");\r",
							"\r",
							"pm.test(\"Source square should be emptypiece\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.Squares[6][3].piece.type).to.eql(\"emptypiece\");\r",
							"});\r",
							"\r",
							"pm.test(\"Destination square should be pawn\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.Squares[4][3].piece.type).to.eql(\"pawn\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{PlayerOneAccessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"currentRow\": 6,\r\n    \"currentColumn\": 3,\r\n    \"newRow\": 4,\r\n    \"newColumn\": 3\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/make-a-move/{{chessBoardId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"make-a-move",
						"{{chessBoardId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PlayerTwoMakesMove",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Source square should be emptypiece\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.Squares[1][2].piece.type).to.eql(\"emptypiece\");\r",
							"});\r",
							"\r",
							"pm.test(\"Destination square should be pawn\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.Squares[2][2].piece.type).to.eql(\"pawn\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{PlayerTwoAccessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"currentRow\": 1,\r\n    \"currentColumn\": 2,\r\n    \"newRow\": 2,\r\n    \"newColumn\": 2\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/make-a-move/{{chessBoardId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"make-a-move",
						"{{chessBoardId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PlayerOneMakesMove2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Source square should be emptypiece\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.Squares[6][4].piece.type).to.eql(\"emptypiece\");\r",
							"});\r",
							"\r",
							"pm.test(\"Destination square should be pawn\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.Squares[4][4].piece.type).to.eql(\"pawn\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{PlayerOneAccessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"currentRow\": 6,\r\n    \"currentColumn\": 4,\r\n    \"newRow\": 4,\r\n    \"newColumn\": 4\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/make-a-move/{{chessBoardId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"make-a-move",
						"{{chessBoardId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PlayerTwoMakesMove2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Source square should be emptypiece\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.Squares[1][1].piece.type).to.eql(\"emptypiece\");\r",
							"});\r",
							"\r",
							"pm.test(\"Destination square should be queen\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.Squares[3][1].piece.type).to.eql(\"pawn\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{PlayerTwoAccessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"currentRow\": 1,\r\n    \"currentColumn\": 1,\r\n    \"newRow\": 3,\r\n    \"newColumn\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/make-a-move/{{chessBoardId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"make-a-move",
						"{{chessBoardId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PlayerOneMakesMove3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Source square should be emptypiece\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.Squares[7][4].piece.type).to.eql(\"emptypiece\");\r",
							"});\r",
							"\r",
							"pm.test(\"Destination square should be pawn\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.Squares[3][0].piece.type).to.eql(\"queen\");\r",
							"});\r",
							"\r",
							"pm.test(\"Winner should be available\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.WinnerUsername).to.eql(\"test_user1\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{PlayerOneAccessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"currentRow\": 7,\r\n    \"currentColumn\": 4,\r\n    \"newRow\": 3,\r\n    \"newColumn\": 0\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/make-a-move/{{chessBoardId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"make-a-move",
						"{{chessBoardId}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "PlayerOneAccessToken",
			"value": "",
			"type": "default"
		},
		{
			"key": "PlayerTwoAccessToken",
			"value": "",
			"type": "default"
		},
		{
			"key": "PlayerOneAccessToken_CreatedAt",
			"value": "2023-04-14T14:51:54.255Z",
			"type": "default"
		},
		{
			"key": "PlayerTwoAccessToken_CreatedAt",
			"value": "2023-04-14T14:51:54.252Z",
			"type": "default"
		},
		{
			"key": "PlayerOneAccessToken_ExpiresIn",
			"value": 100000000,
			"type": "default"
		},
		{
			"key": "PlayerTwoAccessToken_ExpiresIn",
			"value": 100000000,
			"type": "default"
		},
		{
			"key": "chessBoardId",
			"value": "18daa5af-2fd8-42c9-b609-c7ace7650c0d",
			"type": "default"
		},
		{
			"key": "tokenEndpoint",
			"value": "getToken",
			"type": "default"
		}
	]
}