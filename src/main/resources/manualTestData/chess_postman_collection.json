{
	"info": {
		"_postman_id": "78c50db2-f0b5-4aa1-87f4-44056a884384",
		"name": "Chess",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "CreateNewBoardWithPlayerOne",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set(\"chessBoardId\", pm.response.json().BoardId);\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{PlayerOneAccessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "localhost:8080/board",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"board"
					]
				}
			},
			"response": []
		},
		{
			"name": "Player2JoinsGame",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"const chessBoardId = pm.collectionVariables.get(\"chessBoardId\");\r",
							"\r",
							"pm.test(\"Chess board Id is matching path variable\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.BoardId).to.eql(chessBoardId);\r",
							"});\r",
							"\r",
							"pm.test(\"Player two should not be null\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.Players.PlayerTwoUsername).to.eql(\"test_user2\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{PlayerTwoAccessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/add-player-two-board/{{chessBoardId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"add-player-two-board",
						"{{chessBoardId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PlayerOneMakesMove",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Source square should be emptypiece\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.Squares[6][4].piece.type).to.eql(\"emptypiece\");\r",
							"});\r",
							"\r",
							"pm.test(\"Destination square should be pawn\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.Squares[4][4].piece.type).to.eql(\"pawn\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{PlayerOneAccessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"currentRow\": 6,\r\n    \"currentColumn\": 4,\r\n    \"newRow\": 4,\r\n    \"newColumn\": 4\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/make-a-move/{{chessBoardId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"make-a-move",
						"{{chessBoardId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PlayerTwoMakesMove",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Source square should be emptypiece\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.Squares[1][5].piece.type).to.eql(\"emptypiece\");\r",
							"});\r",
							"\r",
							"pm.test(\"Destination square should be pawn\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.Squares[2][5].piece.type).to.eql(\"pawn\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{PlayerTwoAccessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"currentRow\": 1,\r\n    \"currentColumn\": 5,\r\n    \"newRow\": 2,\r\n    \"newColumn\": 5\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/make-a-move/{{chessBoardId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"make-a-move",
						"{{chessBoardId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PlayerOneMakesMove2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Source square should be emptypiece\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.Squares[6][6].piece.type).to.eql(\"emptypiece\");\r",
							"});\r",
							"\r",
							"pm.test(\"Destination square should be pawn\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.Squares[5][6].piece.type).to.eql(\"pawn\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{PlayerOneAccessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"currentRow\": 6,\r\n    \"currentColumn\": 6,\r\n    \"newRow\": 5,\r\n    \"newColumn\": 6\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/make-a-move/{{chessBoardId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"make-a-move",
						"{{chessBoardId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PlayerTwoMakesMove2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Source square should be emptypiece\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.Squares[0][4].piece.type).to.eql(\"emptypiece\");\r",
							"});\r",
							"\r",
							"pm.test(\"Destination square should be queen\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.Squares[3][7].piece.type).to.eql(\"queen\");\r",
							"});\r",
							"\r",
							"pm.test(\"Winner should be available\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.WinnerUsername).to.eql(\"test_user2\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{PlayerTwoAccessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"currentRow\": 0,\r\n    \"currentColumn\": 4,\r\n    \"newRow\": 3,\r\n    \"newColumn\": 7\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/make-a-move/{{chessBoardId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"make-a-move",
						"{{chessBoardId}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"var playerOneTokenCreatedAt = pm.collectionVariables.get(\"PlayerOneAccessToken_CreatedAt\");",
					"",
					"if (!playerOneTokenCreatedAt) {",
					"    playerOneTokenCreatedAt = new Date(new Date().setDate(new Date().getDate() - 1))",
					"}",
					"",
					"var playerOneTokenExpiresIn = pm.collectionVariables.get(\"PlayerOneAccessToken_ExpiresIn\");",
					"",
					"if (!playerOneTokenExpiresIn) {",
					"    playerOneTokenExpiresIn = 5000;",
					"}",
					"",
					"var playerOneTokenCreatedTime = (new Date() - Date.parse(playerOneTokenCreatedAt))",
					"",
					"if (playerOneTokenCreatedTime >= playerOneTokenExpiresIn) {",
					"",
					"    console.log(\"The Player One token has expired. Attempting to request a new token.\");",
					"",
					"pm.sendRequest({",
					"    url: 'http://localhost:8080/token',",
					"    method: 'POST',",
					"    header: {",
					"        'Authorization':'Basic dGVzdF91c2VyMTphZG1pbg==',",
					"        'content-type': 'application/x-www-form-urlencoded'",
					"    },",
					"    body:{",
					"   mode:\"urlencoded\",",
					"   urlencoded:[",
					"      {",
					"         key:\"grant_type\",",
					"         value:\"password\"",
					"      },",
					"      {",
					"         key:\"username\",",
					"         value:\"test_user1\"",
					"      },",
					"      {",
					"         key:\"password\",",
					"         value:\"admin\"",
					"      }",
					"   ]",
					"}",
					"}, function(error, response) {",
					"        console.log(\"PlayerOneAccessToken: \" + response.json().access_token);",
					"        ",
					"        pm.collectionVariables.set(\"PlayerOneAccessToken_CreatedAt\", new Date());",
					"        pm.collectionVariables.set(\"PlayerOneAccessToken\", response.json().access_token);",
					"",
					"        pm.collectionVariables.set(\"PlayerOneAccessToken_ExpiresIn\", 100000000);",
					"    });",
					"}",
					"",
					"//-----------------------------------------------------------------------------------",
					"",
					"var playerTwoTokenCreatedAt = pm.collectionVariables.get(\"PlayerTwoAccessToken_CreatedAt\");",
					"",
					"if (!playerTwoTokenCreatedAt) {",
					"    playerTwoTokenCreatedAt = new Date(new Date().setDate(new Date().getDate() - 1))",
					"}",
					"",
					"var playerTwoTokenExpiresIn = pm.collectionVariables.get(\"PlayerTwoAccessToken_ExpiresIn\");",
					"",
					"if (!playerTwoTokenExpiresIn) {",
					"    playerTwoTokenExpiresIn = 5000;",
					"}",
					"",
					"var playerTwoTokenCreatedTime = (new Date() - Date.parse(playerTwoTokenCreatedAt))",
					"",
					"if (playerTwoTokenCreatedTime >= playerTwoTokenExpiresIn) {",
					"",
					"    console.log(\"The Player Two token has expired. Attempting to request a new token.\");",
					"",
					"pm.sendRequest({",
					"    url: 'http://localhost:8080/token',",
					"    method: 'POST',",
					"    header: {",
					"        'Authorization':'Basic dGVzdF91c2VyMjphZG1pbg==',",
					"        'content-type': 'application/x-www-form-urlencoded'",
					"    },",
					"    body:{",
					"   mode:\"urlencoded\",",
					"   urlencoded:[",
					"      {",
					"         key:\"grant_type\",",
					"         value:\"password\"",
					"      },",
					"      {",
					"         key:\"username\",",
					"         value:\"test_user2\"",
					"      },",
					"      {",
					"         key:\"password\",",
					"         value:\"admin\"",
					"      }",
					"   ]",
					"}",
					"}, function(error, response) {",
					"        console.log(\"PlayerTwoAccessToken: \" + response.json().access_token);",
					"        ",
					"        pm.collectionVariables.set(\"PlayerTwoAccessToken_CreatedAt\", new Date());",
					"        pm.collectionVariables.set(\"PlayerTwoAccessToken\", response.json().access_token);",
					"",
					"        pm.collectionVariables.set(\"PlayerTwoAccessToken_ExpiresIn\", 100000000);",
					"    });",
					"}",
					"",
					"",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "PlayerOneAccessToken",
			"value": "eyJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJzZWxmIiwic3ViIjoidGVzdF91c2VyMSIsImV4cCI6MTY4MTQ4MzExMSwiaWF0IjoxNjc3ODgzMTExLCJzY29wZSI6IlVzZXIifQ.gYc-40GY6pxAmLFeYs_4AIBWng5yC2eSL1npLx_1WJZ5IhB10F5H_T7dArx3fROVZIE74s0Mfq5NayduBlACVt3Y6OYmfhOBSlTW8x2vhVvMPZ_OUULBOi4OJEn4NbzR4YQi6662LAG3vsjWofV0GRfQnrMWNixDbbgih_GAH_3I_A_yLmmhRlGKfP1ForY27H-jevala1U2mrTLUx71RjT1A-6ziiCcNMRr7JV_sjo9YhydqAyluEiBgLEPx7Niu_ob9ev4EIaAa2Pz67i4ystZvBdOeXXXOjC2TaSzoXE97kbAGzDq_WCRuPzNqzc4eEZ7PTyOgdNMuswmX0FY2w",
			"type": "default"
		},
		{
			"key": "PlayerTwoAccessToken",
			"value": "eyJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJzZWxmIiwic3ViIjoidGVzdF91c2VyMiIsImV4cCI6MTY4MTQ4MzExMSwiaWF0IjoxNjc3ODgzMTExLCJzY29wZSI6IlVzZXIifQ.WsPHrRcu7VhcMse7IQ68hDu_Muu1D50zz3UOXZF_c56hOSf2wBRl_AZeReHghGTTqWY1MiUztrOcxhO89aPFhybtn7gw7T76xpLhhaMi8gp2acv9x0nRNbOE3DUB5cGqpN-LMN-fFZth04Jzxsj4AYCGwbPUDd4tlfbq2rKUV85FE_woNsrZglR_8ogRKTHwaK9ZJz7DDJWZYmq6Ok5UmImvpuls9AGdO-HNs7gXxmqmdriX3cPLIoHV6wTZnzxUX3_QMwMMGKw_y8GT2CFZNINGtwKFRIehyOxJ8DOThpfQooQkZxk2QBMR5uiVWRBVWZIFUIyxAcM-K-5l4KJUhA",
			"type": "default"
		},
		{
			"key": "PlayerOneAccessToken_CreatedAt",
			"value": "2023-03-03T22:38:31.149Z",
			"type": "default"
		},
		{
			"key": "PlayerTwoAccessToken_CreatedAt",
			"value": "2023-03-03T22:38:31.152Z",
			"type": "default"
		},
		{
			"key": "PlayerOneAccessToken_ExpiresIn",
			"value": 100000000,
			"type": "default"
		},
		{
			"key": "PlayerTwoAccessToken_ExpiresIn",
			"value": 100000000,
			"type": "default"
		},
		{
			"key": "chessBoardId",
			"value": "f2182b29-efed-4403-bb68-220d265651cb",
			"type": "default"
		}
	]
}